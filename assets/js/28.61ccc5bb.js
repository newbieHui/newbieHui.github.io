(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{187:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"es6-class-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6-class-类","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 Class 类")]),t._v(" "),n("hr"),t._v(" "),n("p",[t._v("class")]),t._v(" "),n("ol",[n("li",[t._v("Js中生成实例对象的传统方法是使用构造函数")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("weight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" weight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nPerson"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("toString")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("125")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Person { name: 'tom', weight: 125 }")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//(tom,125)")]),t._v("\n")])])]),n("p",[t._v("2.ES6 class")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("weight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" weight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'('")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("','")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("weight "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("')'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tom'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("125")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("如上，ES5的构造函数Person，对应ES6 Person类的构造方法")]),t._v(" "),n("p",[t._v("// class Person {}\n// typeof Person\n// console.log(typeof Person)   //function")]),t._v(" "),n("p",[t._v("// Person === Person.prototype.constructor;   //true\n//类的数据类型就是函数，类本身指向构造函数")]),t._v(" "),n("p",[t._v("// class Person{\n//     constructor(){}\n//     talk(){}\n//     stand(){}\n// }\n//等同于\n// Person.prototype = {\n//     constructor(){},\n//     talk(){},\n//     stand(){}\n// }")]),t._v(" "),n("p",[t._v("// Object.assign方法可以一次向类添加多个方法")]),t._v(" "),n("p",[t._v("// class Person {\n//     constructor(name,weight){\n//         this.name = name;\n//         this.weight = weight;\n//     }\n// }")]),t._v(" "),n("p",[t._v("// Object.assign(Person.prototype,{\n//     talk(){},\n//     stand(){}\n// });")]),t._v(" "),n("p",[t._v("// 类的内部定义的方法都是不可枚举的")]),t._v(" "),n("p",[t._v("// class Person {\n//     constructor(){}\n//     talk(){}\n//     stand(){}\n// }")]),t._v(" "),n("p",[t._v("// Object.keys(Person.prototype) // []")]),t._v(" "),n("p",[t._v("// 获取对象所有属性包括不可枚举的可以使用Object.getOwnPropertyNames\n// Object.getOwnPropertyNames(Person.prototype)   //[ 'constructor', 'talk', 'stand' ]")]),t._v(" "),n("p",[t._v("// class Person {\n//     constructor(name,weight){\n//         this.name = name;\n//         this.weight = weight;\n//     }\n//     talk(){}\n// }\n// var p = new Person('tom',125);\n// p.hasOwnProperty('name')   //true\n// p.hasOwnProperty('weight')   //true\n// p.hasOwnProperty('talk')   //false\n// // hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性(也就是，是否有指定的键)。\n// p."),n("strong",[t._v("proto")]),t._v(".hasOwnProperty('talk');   //true")]),t._v(" "),n("p",[t._v("//所以我们也可以通过实例的__proto__向类添加方法\n// p."),n("strong",[t._v("proto")]),t._v(".printName = function(){\n//     console.log(this.name)\n// }")]),t._v(" "),n("p",[t._v("// p.printName()   //tom")]),t._v(" "),n("p",[t._v("// class Person {\n//     constructor(name,weight){\n//         this.name = name;\n//         this.weight = weight;\n//     }\n//     get prop(){\n//         return this.name;\n//     }")]),t._v(" "),n("p",[t._v("//     set prop(value){\n//         this.name = value;\n//     }\n// }")]),t._v(" "),n("p",[t._v("// let p = new Person();\n// p.prop\n// p.prop = 'demo'\n// console.log(p.name)   //demo")]),t._v(" "),n("p",[t._v("// 静态方法\n// 类相当于实例原型，在类中定义的方法都可以在实例中调用。如果在类中定义方法时加上static关键字，这时定义的方法叫做静态方法，不能被实例调用，可以直接通过类\n// 来调用")]),t._v(" "),n("p",[t._v("// class Person{\n//     static say(){\n//         return 'Hello'\n//     }\n// }")]),t._v(" "),n("p",[t._v("// let p = new Person();\n// // p.say();   // p.say is not a function\n// Person.say();   // Hello")]),t._v(" "),n("p",[t._v("//如果静态方法包含this，则this指向类而不是实例\n// class Person {\n//     static talk(){\n//         console.log('Hello')\n//     }\n//     talk(){\n//         console.log('World')\n//     }\n//     static say(){\n//         this.talk()\n//     }\n// }\n// Person.say()   //Hello\n// 上面代码中可以看出静态方法与实例方法可以同名")]),t._v(" "),n("p",[t._v("// class Person {\n//     static talk(){\n//         console.log('Hello')\n//     }\n// }")]),t._v(" "),n("p",[t._v("// class PersonA extends Person{}")]),t._v(" "),n("p",[t._v("// PersonA.talk()   //Hello")]),t._v(" "),n("p",[t._v("// 可以看出类的静态方法可以被继承使用\n// class Person {\n//     static talk(){\n//         return 'Hello';\n//     }\n// }")]),t._v(" "),n("p",[t._v('// class PersonA extends Person{\n//     static talk(){\n//         return super.talk() + ", World"\n//     }\n// }\n// console.log(PersonA.talk())   //Hello, World')]),t._v(" "),n("p",[t._v("//class的继承")]),t._v(" "),n("p",[t._v("// ES5通过修改原型链实现继承，ES6通过extends关键字实现继承")]),t._v(" "),n("p",[t._v("// class Person {}\n// class PersonA extends Person {}\n// 上面两个类没有任何代码块，所以这两个类完全相同，等于复制了一个Person类")]),t._v(" "),n("p",[t._v("// class Person {}\n// class PersonA extends Person {\n//     constructor(x,y,weight){\n//         super(x,y);   //调用父类constructor(x,y)\n//         this.weight = weight;\n//     }\n//     toString() {\n//         return this.color + super.toString();   //调用父类toString()\n//     }\n// }\n// super关键字表示父类的构造函数，用来新建父类this对象\n// 子类必须在constructor中调用super方法，否则会在实例化的时候报错\n// class Person{}\n// class PersonA extends Person{\n//     constructor(){}\n// }\n// let tom = new PersonA();   //Must call super constructor in derived class before accessing 'this' or returning from derived constructor")]),t._v(" "),n("p",[t._v("// 代码报错的原因是子类自己的this对象，必须先通过父类的构造函数进行塑造，得到与父类相同的属性和方法。如果不调用super方法，子类得不到this对象")]),t._v(" "),n("p",[t._v("// 在子类构造方法中，只有调用super后才可以使用this。这是因为子类实例的构建依赖于父类的实例，只有super方法才能调用分类实例。\n// class Person{\n//     constructor(x,y){\n//         this.x = x;\n//         this.y = y;\n//     }\n// }")]),t._v(" "),n("p",[t._v("// class PersonA extends Person {\n//     constructor(x,y,age){\n//         // this.age = age;   //ReferenceError\n//         // 调用super后才可以使用this\n//         super();\n//         this.age = age;\n//     }\n// }")]),t._v(" "),n("p",[t._v("// let tom = new PersonA(1,2,25);")]),t._v(" "),n("p",[t._v("// console.log(tom instanceof Person)   //true\n// console.log(tom instanceof PersonA)   //true")]),t._v(" "),n("p",[t._v("// 父类的静态方法会被子类继承\n// class Person{\n//     static say(){\n//         console.log('hello')\n//     }\n// }")]),t._v(" "),n("p",[t._v("// class PersonA extends Person {")]),t._v(" "),n("p",[t._v("// }")]),t._v(" "),n("p",[t._v("// PersonA.say();   // hello")]),t._v(" "),n("p",[t._v("// //Object.getPrototypeOf方法可以用来从子类上获取父类。\n// Object.getPrototypeOf(PersonA) === Person   // true")]),t._v(" "),n("p",[t._v("// 类的prototype属性和__proto__属性\n// (1)子类的__proto__属性，表示构造函数的继承，总是指向父类。")]),t._v(" "),n("p",[t._v("// (2)子类prototype属性的__proto__属性，表示方法的继承，总是指向父类的prototype属性。")]),t._v(" "),n("p",[t._v("class A {}\nclass B extends A {}")]),t._v(" "),n("p",[t._v("B."),n("strong",[t._v("proto")]),t._v(" === A   // true\nB.prototype."),n("strong",[t._v("proto")]),t._v(" === A.prototype   // true")]),t._v(" "),n("p",[t._v("// 子类实例的__proto__属性的__proto__属性，指向父类实例的__proto__属性。也就是说，子类的原型的原型，是父类的原型。")])])}],!1,null,null,null);s.default=e.exports}}]);